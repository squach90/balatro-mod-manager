name: "release-without-notarization"
on:
  workflow_dispatch:
  workflow_run:
    workflows: ["build-sign"] # Ensure this matches the actual name of your build workflow
    types:
      - completed
jobs:
  prepare-release-notes:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read
    outputs:
      release_notes: ${{ steps.notes.outputs.RELEASE_NOTES }}
      app_version: ${{ steps.version.outputs.APP_VERSION }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: Extract app version
        id: version
        run: |
          # Adjust this grep command if your version format or file path differs
          APP_VERSION=$(grep -m1 'version =' src-tauri/Cargo.toml | cut -d '"' -f2)
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_OUTPUT
      - name: Generate GitHub-Style Release Notes
        id: notes
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APP_VERSION: ${{ steps.version.outputs.APP_VERSION }}
        run: |
          REPO_OWNER=$(echo "$GITHUB_REPOSITORY" | cut -d '/' -f 1)
          REPO_NAME=$(echo "$GITHUB_REPOSITORY" | cut -d '/' -f 2)

          ALL_TAGS=$(git tag -l 'v*' | sort -V)
          echo "All tags in repository: $ALL_TAGS"

          CURRENT_TAG="v$APP_VERSION"

          PREVIOUS_TAG=$(echo "$ALL_TAGS" | grep -v "^$CURRENT_TAG$" | sort -V | tail -n 1)

          echo "Previous tag: $PREVIOUS_TAG"
          echo "Current version: $CURRENT_TAG"

          echo "## What's Changed" > RELEASE_NOTES.md

          # Fetch recent merged PRs targeting the main branch
          # Consider adjusting --limit or filtering logic if needed
          gh pr list --repo $GITHUB_REPOSITORY --state merged --base main --json number,title,author,url --limit 10 | jq -r '.[] | "* \(.title) by @\(.author.login) in \(.url)"' >> RELEASE_NOTES.md

          if [ -n "$PREVIOUS_TAG" ]; then
            echo "" >> RELEASE_NOTES.md
            echo "**Full Changelog**: https://github.com/$REPO_OWNER/$REPO_NAME/compare/$PREVIOUS_TAG...$CURRENT_TAG" >> RELEASE_NOTES.md
          else
            echo "" >> RELEASE_NOTES.md
            echo "**Full Changelog**: First release!" >> RELEASE_NOTES.md # Handle first release case
          fi

          # Append security note only if signing is NOT successful later (consider conditional logic)
          # For now, keeping it as requested, but ideally you'd remove this if signing works
          cat >> RELEASE_NOTES.md << 'EOL'
          ❓ FAQ
          Q: How do I know this isn't malware?
          A: Check the source code and verify the digital signature details.
          EOL

          NOTES=$(cat RELEASE_NOTES.md)
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
          echo "$NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
  create-release:
    needs: prepare-release-notes
    runs-on: ubuntu-latest
    # Add necessary permissions for SignPath action and release creation
    permissions:
      contents: write
      actions: read # Required by SignPath action to read artifact details via GITHUB_TOKEN
    steps:
      - name: Get workflow run info
        run: |
          echo "Triggering workflow run ID: ${{ github.event.workflow_run.id }}"
          echo "Triggering workflow: ${{ github.event.workflow_run.name }}"
          echo "Conclusion: ${{ github.event.workflow_run.conclusion }}"
      # Only proceed if the triggering build workflow was successful
      - name: Check triggering workflow conclusion
        if: github.event.workflow_run.conclusion != 'success'
        run: |
          echo "Triggering workflow run was not successful (${{ github.event.workflow_run.conclusion }}). Skipping release."
          exit 1
      - name: Download all artifacts from triggering workflow
        uses: dawidd6/action-download-artifact@v3
        with:
          workflow: build-sign # Ensure this matches the actual name of your build workflow
          run_id: ${{ github.event.workflow_run.id }}
          path: artifacts
          search_artifacts: true
          check_artifacts: true # Fail if artifacts are missing/corrupt
          if_no_artifact_found: fail # Fail the job if artifacts aren't found
      - name: List downloaded artifacts
        run: |
          echo "Artifacts directory content:"
          ls -R artifacts || echo "No artifacts directory found"
          # Find the specific executable - adjust path if needed
          find artifacts -type f -name '*.exe' -print -quit
      - name: Upload unsigned files for signing
        id: upload-unsigned-files
        uses: actions/upload-artifact@v4
        with:
          name: unsigned-files-${{ github.run_id }}
          path: |
            artifacts/**/*.exe
            artifacts/**/*.msi
          if-no-files-found: error
          retention-days: 1
      # Submit the uploaded artifact to SignPath for signing
      - name: Submit SignPath Signing Request
        uses: signpath/github-action-submit-signing-request@v1
        id: signpath
        with:
          # Required SignPath Credentials and Configuration
          api-token: ${{ secrets.SIGNPATH_API_TOKEN }}
          organization-id: ${{ vars.SIGNPATH_ORGANIZATION_ID }}
          project-slug: "balatro-mod-manager" # Replace with your SignPath Project Slug
          signing-policy-slug: "release-signing" # Replace with your SignPath Policy Slug
          artifact-configuration-slug: "zipped_exe_msi"
          # Link to the artifact uploaded in the previous step
          github-artifact-id: ${{ steps.upload-unsigned-files.outputs.artifact-id }}
          # Action Configuration
          wait-for-completion: true # Wait for signing to finish before proceeding
          output-artifact-directory: "./signed-artifact" # Where the signed file will be downloaded
          github-token: ${{ secrets.GITHUB_TOKEN }}
          # Optional: Pass parameters if required by your SignPath Artifact Configuration
          # parameters: |
          #   version: "${{ needs.prepare-release-notes.outputs.app_version }}"
          #   description: "Balatro Mod Manager Release"
      - name: List signed artifacts
        run: |
          echo "Signed artifact directory content:"
          ls -R signed-artifact || echo "No signed-artifact directory found"
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.prepare-release-notes.outputs.app_version }}
          name: Balatro Mod Manager v${{ needs.prepare-release-notes.outputs.app_version }} (Alpha Build) Pre-release
          body: ${{ needs.prepare-release-notes.outputs.release_notes }}
          draft: true
          prerelease: true
          # Upload original non-Windows artifacts AND the newly signed Windows executable
          files: |
            artifacts/**/*.dmg
            signed-artifact/**/*.exe
            signed-artifact/**/*.msi
          token: ${{ secrets.GITHUB_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
